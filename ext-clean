#!/bin/sh
#
# File: ext-clean
# Version: 5.2019.0
# Author: BreadyX
#
# Cleans the folder and its subfolders of any junk files. 
# The program cleans them based on extension (default or
# user given).
# 

### FLAGS
VERSION="5.2019.0"                  # Version of the script

RECURSIVE=0				            # Should it operate recursively?
ASK=0                               # Should it ask permission?
EXTENSIONS="aux log tex~ bbl blg"	# Extensions array

# Help dialog text
HELP_DIALOG=$(cat << EOF
ext-clean [--extensions schema | --extensions=schema] [--recursive] [--ask]
		  [--help] [--version]

Cleans the folder (and its subfolders if '--recursive' is given) of any files
with the selected extensions extensions 

OPTIONS:
    --extensions schema		Extensions to delete comma separated (e.g. "aux,log")
    --extensions=schema		You can also use glob expansion (e.g. "al*") so be
							careful.
                            If option not specified, ext-clean will use a default
                            set of extensions: $EXTENSIONS
    --recursive				Recurse into subfolders   
    --ask					Ask for confirmation   
    --help					Show this dialog    
    --version				Show a dialog with details about version
    

ext-clean - Part of BreadyX's utils (BXU). Version $VERSION
This program has been written by BreadyX, contacts (for bug reports and other):
    Github profile:     https://github.com/BreadyX
    GitHub repo (BXU):  https://github.com/BreadyX/bxu
EOF
)
# Version dialog text
VERSION_DIALOG=$(cat << EOF
ext-clean - BreadyX's utils (BXU). Version $VERSION
This program has been written by BreadyX, contacts (for bug reports and other):
    Github profile:     https://github.com/BreadyX
    GitHub repo (BXU):  https://github.com/BreadyX/bxu
EOF
)


### FUNCTIONS
# Pretty prints errors
print_error()
{
    RED=$(tput setaf 1)
    RESET=$(tput sgr0)
    printf "%s\n" "$RESET$RED$1$RESET" >&2
}

# Heart of the program, checks for file extension with regex (grep) and removes file.
# It can also operate recursively if RECURSIVE flag is set
_remove()
{
    # Outer loop, loops through all the extensions in the EXTENSIONS array. 
    # The current extension is named 'ext'
    for ext in $EXTENSIONS; do
        # Inner loop, loops through all the files that have extension 'ext'.
        # If 'ext' can be glob-expanded it will happen here.
        for file in ./*.$ext; do
            # Checks if $file exists, in case the glob expansion fails
            if [ -e "$file" ]; then
                # Checks file permissions
                if ! [ -w "$file" ]; then
                    print_error "The user cannot delete file $file"
                    continue
                fi
                # If ASK flag is set, ask. If the user answers yes, continue
                # the cycle, if it answers no skip to the nex iteration
                if [ "$ASK" -eq 1 ]; then
                    printf "Remove %s? [Y/n] " "$file"
                    read -r input
                    if [ "${input,,}" == "n" ] || [ "${input,,}" == "no" ]; then
                        continue
                    fi
                fi
                # Delete file
                printf "Removing %s\n" "$file"
                rm "$file"
            fi
        done
    done
    # If RECURSIVE flag is set, call the function in all of the subdirectories
    if [ $RECURSIVE -eq 1 ]; then
        for dir in ./*; do
            if [ -d "$dir" ]; then
                (
		            cd "$dir" || exit
		            _remove
                )
            fi
        done
    fi
}

### SCRIPT
# loop that evaluates cmd args. It only checks of long option (double dash)
while [ $# -gt 0 ]; do
    case $1 in
        "--help")
            printf "%s\n" "$HELP_DIALOG"
            exit 0
            ;;
        "--version")
            printf "%s\n" "$VERSION_DIALOG"
            exit 0
            ;;
        "--extensions"|"--extensions="*)
            # Change behaviour depending on style of option
            if (echo "$1" | grep -q "\-\-extensions="); then 
                USER_INPUT="${1//--extensions=/}"
                shift
            else
                if (echo "$2" | grep -q "^\-\-"); then 
                    print_error "Invalid usage, please use --help for more information."
                    exit 1
                fi
                USER_INPUT="$2"
                shift 2
            fi
            # Assign and let's go
            EXTENSIONS="$(echo "$USER_INPUT" | sed 's/,/ /g')"
            ;;
        "--ask")
            ASK=1
            shift
            ;;
        "--recursive")
            RECURSIVE=1
            shift
            ;;
        "")
            shift
            ;;
        *)
            print_error "Invalid arguments, please see 'ext-clean --help' for help."
            exit 1
            ;;
    esac
done

# calls "main" function after cmd args evaluation
_remove
