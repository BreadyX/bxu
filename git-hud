#! /bin/sh -e

# Print formatted information about the git repository, if it exists, in the
# current directory.

### TODO: optimize things (use git rev-parse and git status --porcelain)
### TODO: do not show unpushed commits if no remote is found

VERSION="8.2019.2"
err() {
    # Pretty print errors #
    RED=$(tput setaf 1)
    RESET=$(tput sgr0)
    printf "E: %s\n" "$RESET$RED$1$RESET" >&2
    exit 1
}

dialog() {
    # Print help or version dialog depending on argument. If 'help' print the help #
    # one, if 'version' print the version one.                                     #
    HELP_DIALOG="Usage: git-hud [ OPTION ]
    Format a quick summary about the current git repository and print it to standard
    output.

    If environment variable GIT_HUD_GLYPH is set the script will use fontawesome glyphs.

        --help      Print this dialog
        --version   Print dialog containing info about version"
    VERSION_DIALOG="git-hud - BreadyX's utils (BXU). Version $VERSION
    Written by BreadyX, contacts (for bug reports and other):
        Github profile:     https://github.com/BreadyX
        GitHub repo (BXU):  https://github.com/BreadyX/bxu"
    case $1 in
        'help')
            printf "%s\n" "$HELP_DIALOG" ;;
        'version')
            printf "%s\n" "$VERSION_DIALOG" ;;
    esac
    exit 0
}

# # Print prompt after assinging all the correct values
# prompt() {
#     ## git status --porcelain --branch -> get all info about repo
#     # Status-related variables
#     UNPUSH=""
#     # Check if we want fontawesome glyphs disabled
#     if [ -n "$GIT_HUD_GLYPH" ]; then BRANCH_GLYPH="|/"
#     else BRANCH_GLYPH=""; fi
#     if (grep -q 'ref: ' "$1/.git/HEAD"); then
#         BRANCH="$(cut -d'/' -f3 "$1/.git/HEAD")"
#         commit_file="$1/.git/$(cut -d' ' -f2 "$1/.git/HEAD")"
#         [ -f "$commit_file" ] && LATEST_COMMIT="$(cut -b 1,2,3,4,5,6,7 "$commit_file")"
#         ### Check for unpushed
#     else
#         BRANCH='-'
#         LATEST_COMMIT="$(cut -b 1,2,3,4,5,6,7 "$1/.git/HEAD")"
#         ### Check for unpushed
#     fi
#     if [ -f "$1/.git/refs/stash" ]; then STASH="$"
#     else STASH=""; fi
#     # Unpushed commits
#     # [ -n "$(git cherry -v)" ] && UNPUSH="+"
#     # Unstaged and untracked files/changes
#     UNSTAGE=""
#     UNTRACK=""
#     MODS="$(git status -u -s)"
#     (echo "$MODS" | grep -q '^A\|^ M\|^  D') && UNSTAGE="*"
#     (echo "$MODS" | grep -q '??') && UNTRACK="?"
#     # Output
#     printf "%s; [%s]" "$BRANCH_GLYPH $BRANCH ($LATEST_COMMIT)" "$UNSTAGE$UNTRACK$UNPUSH$STASH"
# }

prompt() {
    # Print the prompt #
    BRANCH_GLYPH='\|'
    AHEAD_GLYPH='^'
    BEHIND_GLYPH='v'
    if [ -n "GIT_HUD_GLYPH" ]; then
        BRANCH_GLYPH=''
        AHEAD_GLYPH=''
        BEHIND_GLYPH=''
    fi

    printf "%s; [%s] [%s]" "$BRANCH_GLYPH $BRANCH ($LATEST_COMMIT)" \
        "$AHEAD_GLYPH $AHEAD $BEHIND_GLYPH $BEHIND" \
        "$UNSTAGE$UNTRACK$UNPUSH$STASH"

}

# Eval arguments
case $1 in
    "--help")
        dialog 'help' ;;
    "--version")
        dialog 'version' ;;
    "") ;;
    *)
        err "Invalid argument '$1', please check help dialog for info" ;;
esac

GITDIR="$(git rev-parse --show-toplevel 2>/dev/null)"
[ -n "$GITDIR" ] && prompt "$GITDIR"

# Exit because we are all done and everything is good
exit 0
