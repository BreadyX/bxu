#! /bin/sh -e

# Print formatted information about the git repository, if it exists, in the
# current directory.

VERSION="0.1"
dialog() {
    # Print help or version dialog depending on argument. If 'help' print the help #
    # one, if 'version' print the version one.                                     #
    HELP_DIALOG="Usage: git-hud [ OPTION ]
    Format a quick summary about the current git repository and print it to standard
    output.

    If environment variable GIT_HUD_GLYPH is set, the script will use fontawesome glyphs.

        --help      Print this dialog
        --version   Print dialog containing info about version"
    VERSION_DIALOG="git-hud - BreadyX's utils (BXU). Version $VERSION
    Written by BreadyX, contacts (for bug reports and other):
        Github profile:     https://github.com/BreadyX
        GitHub repo (BXU):  https://github.com/BreadyX/bxu"
    case $1 in
        'help')
            printf "%s\n" "$HELP_DIALOG" ;;
        'version')
            printf "%s\n" "$VERSION_DIALOG" ;;
    esac
    exit 0
}

prompt() {
    # Print the prompt #
    BRANCH_GLYPH='\|'
    AHEAD_GLYPH='^'
    BEHIND_GLYPH='v'
    if [ -n "$GIT_HUD_GLYPH" ]; then
        BRANCH_GLYPH=''
        AHEAD_GLYPH=''
        BEHIND_GLYPH=''
    fi
    REPOINFO="$(git status --porcelain --branch)"
    # Stuff that can be extrapolated from the first line
    FIRSTLINE="$(echo "$REPOINFO" | grep '^##')"
    BRANCH="$(echo "$FIRSTLINE" | awk -F'[.][.][.]' '{print substr($1, 4)}')"
    AHEAD="$(echo "$FIRSTLINE" | awk '{print substr($4, 1, 1)}')"
    BEHIND="$(echo "$FIRSTLINE" | awk '{print substr($6, 1, 1)}')"
    LATESTCOMMIT="$(cut -c 1,2,3,4,5,6,7 "$1/.git/refs/heads/$BRANCH")"
    # Stuff that can be extrapolated from everywhere else
    MODS="$(echo "$REPOINFO" | grep -v '^##')"
    (echo "$MODS" | grep -q '^A\|^ M\|^  D') && UNSTAGE="*"
    (echo "$MODS" | grep -q '??') && UNTRACK="?"
    # other
    [ -f "$1/.git/refs/stash" ] && STASH="$"
    # Print prompt
    printf "%s; [%s] [%s]" "$BRANCH_GLYPH $BRANCH ($LATESTCOMMIT)" \
        "$AHEAD_GLYPH $AHEAD $BEHIND_GLYPH $BEHIND" "$UNSTAGE$UNTRACK$STASH"
}

# Eval arguments
case $1 in
    "--help")
        dialog 'help' ;;
    "--version")
        dialog 'version' ;;
    "") ;;
    *)
        RED=$(tput setaf 1)
        RST=$(tput sgr0)
        printf "${RST}E: ${RED}Invalid argument %s, please check help dialog for info.${RST}" "$1" >&2
        exit 1
        ;;
esac

GITDIR="$(git rev-parse --show-toplevel 2>/dev/null)"
[ -n "$GITDIR" ] && prompt "$GITDIR"

exit 0
