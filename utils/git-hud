#! /bin/sh -e

# Print formatted information about the git repository, if it exists, in the
# current directory.

# Program info
VERSION="1.2.0"
SYNTAX="Usage: git-hud [ OPTION ]"
DESCRIPTION="Format a quick summary about the current git repository and print it to standard output.
If environment variable GIT_HUD_GLYPH is set, the script will use fontawesome glyphs."
OPTIONS="--help Print this dialog
--version   Print dialog containing info about version"
VERSION_DIALOG="git-hud - BreadyX's utils (BXU). Version $VERSION
Written by BreadyX, contacts (for bug reports and other):
    GitHub repo (BXU):  https://github.com/BreadyX/bxu"

# Glyph init
BRANCH_GLYPH='|'
AHEAD_GLYPH='↑'
BEHIND_GLYPH='↓'
if [ -n "$GIT_HUD_GLYPH" ] && [ "$TERM" != 'linux' ]; then
    BRANCH_GLYPH=''
fi

dialog() {
    # Print help or version dialog depending on argument. If 'help' print the help #
    # one, if 'version' print the version one.                                     #
    case $1 in
        'help')
            printf "%s\n\n%s\n\n%s\n\n" "$SYNTAX" "$DESCRIPTION" \
                "$(echo "$OPTIONS" | sed 's/^/\t/')" ;;
        'version')
            printf "%s\n" "$VERSION_DIALOG" ;;
    esac
    exit 0
}

prompt() {
    # Print the prompt #
    REPOINFO="$(git status --porcelain --branch)"
    # Get branch info
    FIRSTLINE="$(echo "$REPOINFO" | head -n 1)"
    BRANCH="$(echo "$FIRSTLINE" | cut -f2 -d' ')"
    if [ "$BRANCH" = "HEAD" ]; then
        BRANCH="HEAD" AHEAD="" BEHIND=""
    else
        BRANCH="$(echo "$BRANCH" | sed 's/\.\.\./\t/g' | cut -f1)"
        AHEAD="$(echo "$FIRSTLINE" | awk '{print substr($4, 1, 1)}')"
        [ "$AHEAD" = '' ] && AHEAD='0'
        BEHIND="$(echo "$FIRSTLINE" | awk '{print substr($6, 1, 1)}')"
        [ "$BEHIND" = '' ] && BEHIND='0'
    fi
    # Get latest commit
    if [ "$(cut -f1 -d' ' "$1/.git/HEAD")" = 'ref:' ]; then
        if [ -f "$1/.git/refs/heads/$BRANCH" ]; then
            LATESTCOMMIT="$(cut -c 1,2,3,4,5,6,7 "$1/.git/refs/heads/$BRANCH")"
        else
            LATESTCOMMIT='???'
        fi
    else
        LATESTCOMMIT="$(cut -c 1,2,3,4,5,6,7 "$1/.git/HEAD")"
    fi
    # Get info about changes
    (echo "$REPOINFO" | grep -q '^ *[DMAR]') && UNSTAGE="*"
    (echo "$REPOINFO" | grep -q '??') && UNTRACK="?"
    (echo "$REPOINFO" | grep -q 'UU') && UNMERGED="!"
    # Get stash
    [ -f "$1/.git/refs/stash" ] && STASH="$"
    # Print prompt
    MAIN="$BRANCH_GLYPH $BRANCH ($LATESTCOMMIT)"
    MODS="($UNSTAGE$UNTRACK$UNMERGED$STASH)"
    AHEAD_BEHIND="$AHEAD_GLYPH$AHEAD $BEHIND_GLYPH$BEHIND"
    printf "[%s; %s; %s]" "$MAIN" "$AHEAD_BEHIND" "$MODS"
}

# Eval arguments #
case $1 in
    "--help")
        dialog 'help' ;;
    "--version")
        dialog 'version' ;;
    *) ;;
esac

GITDIR="$(git rev-parse --show-toplevel 2>/dev/null)"
[ -n "$GITDIR" ] && prompt "$GITDIR"

exit 0
